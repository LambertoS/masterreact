{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

# Egger
# for account role: egger
# v0.1

func getData (adr: Address, key: String) = {
    let data = match getString(adr, key) {
        case a: String =>
            a
        case _ =>
            ""
    }
  data
}

func authUser(callerPublicKey: ByteVector) = {
    # Hash the caller's public key
    let callerPublicKeyHash = toBase58String(sha256(callerPublicKey));

    let dataValue = getData(this, "connection." + callerPublicKeyHash + ".script");
    let expectedValue = "authorized"

    if (dataValue == expectedValue) then
        true
    else
        false
}

@Callable(i)
func refundWaves(cost: Int) = {
    # check if caller is authorized
    let authenticated = authUser(i.callerPublicKey)

    if (!authenticated) then
        throw("Account hat nicht die nötige Berechtigung für diese Aktion.")
    else
        [ScriptTransfer(i.caller, cost, unit)]
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)






