{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
        
func getData (adr: Address, key: String) = {
    let data = match getString(adr, key) {
        case a: String =>
            a
        case _ =>
            ""
    }
    data
}

# Refund Account
let refundAcc = addressFromStringValue("3N5eKy7FzGGdmcJpPn5epo9HdUmytUZjUS6")

func authUser(i: Invocation) = {
    # Caller is Script Account
    if (i.caller == this) then
        true
    else
        # Get the Address as a string from the Caller
        let callerAddress = toString(i.caller)
        # get connection address
        let dataValue = getData(this, "connection.root")
        # Check if the value exist
        if (dataValue == "") then
            false
        else
            # check if they match
            if (i.caller == addressFromStringValue(dataValue)) then
                true
            else
                false
}


@Callable(i)
func saveSingleKeyValueOnAccount(key: String, keyValue: String) = {
    # check if caller is authorized
    let authenticated = authUser(i)
    if (authenticated) then
        # Prevent the user from calling themselves
        if (i.caller != refundAcc) then
            strict refund = invoke(refundAcc, "refundWaves", [i.fee], [])
            [StringEntry(key, keyValue)]
        else
            [StringEntry(key, keyValue)]
    else
        throw("Account hat nicht die nötige Berechtigung für diese Aktion.")
}


@Callable(i)
func saveListOnAccount(keys: List[String], values: List[String]) = {
    # check if caller is authorized
    let authenticated = authUser(i)
    if (authenticated) then
        # Prevent the user from calling themselves
        if (i.caller != refundAcc) then
            let refund = invoke(refundAcc, "refundWaves", [i.fee], [])

            func addStringEntry(accum: (List[StringEntry], Int), nextValue: String) = {
                let (result, j) = accum
                (result :+ StringEntry(keys[j], nextValue), j + 1)
            }

            let r = FOLD<900>(values, ([], 0), addStringEntry)
            r._1
        else

            func addStringEntry(accum: (List[StringEntry], Int), nextValue: String) = {
                let (result, j) = accum
                (result :+ StringEntry(keys[j], nextValue), j + 1)
            }

            let r = FOLD<900>(values, ([], 0), addStringEntry)
            r._1
    else
        throw("Account hat nicht die nötige Berechtigung für diese Aktion.")
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)